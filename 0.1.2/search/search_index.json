{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#prefect-dbt-flow","title":"prefect-dbt-flow","text":"<p>Prefect-dbt-flow is a Python library that enables Prefect to convert dbt workflows into independent tasks within a Prefect flow. This integration simplifies the orchestration and execution of dbt models and tests using Prefect, allowing you to build robust data pipelines and monitor your dbt projects efficiently.</p> <p>Active Development Notice: Prefect-dbt-flow is actively under development and may not be ready for production use. We advise users to be aware of potential breaking changes as the library evolves. Please check the changelog for updates.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Why Use Prefect-dbt-flow?</li> <li>How to Install</li> <li>Basic Usage</li> <li>Inspiration</li> <li>License</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>Prefect-dbt-flow is a tool designed to streamline the integration of dbt workflows into Prefect. dbt is an immensely popular tool for building and testing data transformation models, and Prefect is a versatile workflow management system. This integration brings together the best of both worlds, empowering data engineers and analysts to create robust data pipelines.</p>"},{"location":"#why-use-prefect-dbt-flow","title":"Why Use Prefect-dbt-flow?","text":""},{"location":"#simplified-orchestration","title":"Simplified Orchestration","text":"<p>With Prefect-dbt-flow, you can orchestrate your dbt workflows with ease. Define and manage your dbt projects and models as Prefect tasks, creating a seamless pipeline for data transformation.</p> <p>Simplified Orchestration</p>"},{"location":"#monitoring-and-error-handling","title":"Monitoring and Error Handling","text":"<p>Prefect provides extensive monitoring capabilities and error handling. Now, you can gain deep insights into the execution of your dbt workflows and take immediate action in case of issues.</p> <p>Monitoring and Error Handling</p>"},{"location":"#workflow-consistency","title":"Workflow Consistency","text":"<p>Ensure your dbt workflows run consistently by managing them through Prefect. This consistency is crucial for maintaining data quality and reliability.</p> <p>Workflow Consistency</p>"},{"location":"#how-to-install","title":"How to Install","text":"<p>You can install Prefect-dbt-flow via pip: <pre><code>pip install prefect-dbt-flow\n</code></pre></p>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Here's an example of how to use Prefect-dbt-flow to create a Prefect flow for your dbt project: <pre><code>from prefect_dbt_flow import dbt_flow\nfrom prefect_dbt_flow.dbt import DbtProfile, DbtProject, DbtDagOptions\n\nmy_flow = dbt_flow(\n        project=DbtProject(\n            name=\"my_flow\",\n            project_dir=\"path_to/dbt_project\",\n            profiles_dir=\"path_to/dbt_profiles\",\n        ),\n        profile=DbtProfile(\n            target=\"dev\",\n        ),\n        dag_options=DbtDagOptions(\n            run_test_after_model=True,\n        ),\n    )\n\nif __name__ == \"__main__\":\n    my_flow()\n</code></pre> For more information consult the Getting started guide</p>"},{"location":"#inspiration","title":"Inspiration","text":"<p>Prefect-dbt-flow draws inspiration from various projects in the data engineering and workflow orchestration space, including: - cosmos by astronomer - anna-geller =&gt; prefect-dataplatform - dbt + Dagster</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. You are free to use, modify, and distribute this software as per the terms of the license. If you find this project helpful, please consider giving it a star on GitHub.</p>"},{"location":"code/","title":"Modules","text":""},{"location":"code/#flow","title":"FLOW","text":""},{"location":"code/#prefect_dbt_flow.flow","title":"<code>prefect_dbt_flow.flow</code>","text":"<p>Functions to create a prefect flow for a dbt project.</p>"},{"location":"code/#prefect_dbt_flow.flow.dbt_flow","title":"<code>dbt_flow(project, profile=None, dag_options=None, flow_kwargs=None)</code>","text":"<p>Create a PrefectFlow for executing a dbt project.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A Class that represents a dbt project configuration.</p> required <code>profile</code> <code>Optional[DbtProfile]</code> <p>A Class that represents a dbt profile configuration.</p> <code>None</code> <code>dag_options</code> <code>Optional[DbtDagOptions]</code> <p>A Class to add dbt DAG configurations.</p> <code>None</code> <code>flow_kwargs</code> <code>Optional[dict]</code> <p>A dict of prefect @flow arguments</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dbt_flow</code> <code>Any</code> <p>A Prefec Flow.</p> Source code in <code>prefect_dbt_flow/flow.py</code> <pre><code>def dbt_flow(\n    project: DbtProject,\n    profile: Optional[DbtProfile] = None,\n    dag_options: Optional[DbtDagOptions] = None,\n    flow_kwargs: Optional[dict] = None,\n) -&gt; Any:\n    \"\"\"\n    Create a PrefectFlow for executing a dbt project.\n\n    Args:\n        project: A Class that represents a dbt project configuration.\n        profile: A Class that represents a dbt profile configuration.\n        dag_options: A Class to add dbt DAG configurations.\n        flow_kwargs: A dict of prefect @flow arguments\n\n    Returns:\n        dbt_flow: A Prefec Flow.\n    \"\"\"\n    all_flow_kwargs = {\n        \"name\": project.name,\n        **(flow_kwargs or {}),\n    }\n\n    dbt_graph = graph.parse_dbt_project(project, dag_options)\n\n    @flow(**all_flow_kwargs)\n    def dbt_flow():\n        \"\"\"\n        Function that configurates and runs a Prefect flow.\n\n        Returns:\n            A prefect flow\n        \"\"\"\n        tasks.generate_tasks_dag(\n            project,\n            profile,\n            dbt_graph,\n            dag_options.run_test_after_model if dag_options else False,\n        )\n\n    return dbt_flow\n</code></pre>"},{"location":"code/#cli","title":"CLI","text":""},{"location":"code/#prefect_dbt_flow.dbt.cli","title":"<code>prefect_dbt_flow.dbt.cli</code>","text":"<p>Utility functions for interacting with dbt using command-line commands.</p>"},{"location":"code/#prefect_dbt_flow.dbt.cli.dbt_ls","title":"<code>dbt_ls(project, dag_options, output='json')</code>","text":"<p>Code that lists resources from the dbt project, using <code>dbt ls</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>dag_options</code> <code>Optional[DbtDagOptions]</code> <p>A class to add dbt DAG configurations.</p> required <code>output</code> <code>str</code> <p>Format of output, default is JSON.</p> <code>'json'</code> <p>Returns:</p> Type Description <code>str</code> <p>list of JSON objects containing dbt resources.</p> Source code in <code>prefect_dbt_flow/dbt/cli.py</code> <pre><code>def dbt_ls(\n    project: DbtProject,\n    dag_options: Optional[DbtDagOptions],\n    output: str = \"json\",\n) -&gt; str:\n    \"\"\"\n    Code that lists resources from the dbt project, using `dbt ls` command.\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        dag_options: A class to add dbt DAG configurations.\n        output: Format of output, default is JSON.\n\n    Returns:\n        list of JSON objects containing dbt resources.\n    \"\"\"\n    dbt_ls_cmd = [DBT_EXE, \"ls\"]\n    dbt_ls_cmd.extend([\"--project-dir\", str(project.project_dir)])\n    dbt_ls_cmd.extend([\"--profiles-dir\", str(project.profiles_dir)])\n    dbt_ls_cmd.extend([\"--output\", output])\n\n    if dag_options:\n        if dag_options.select:\n            dbt_ls_cmd.extend([\"--select\", dag_options.select])\n        if dag_options.exclude:\n            dbt_ls_cmd.extend([\"--exclude\", dag_options.exclude])\n\n    return cmd.run(\" \".join(dbt_ls_cmd))\n</code></pre>"},{"location":"code/#prefect_dbt_flow.dbt.cli.dbt_run","title":"<code>dbt_run(project, profile, model)</code>","text":"<p>Function that executes <code>dbt run</code> command</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>profile</code> <code>DbtProfile</code> <p>A class that represents a dbt profile configuration.</p> required <code>model</code> <code>str</code> <p>Name of the model to run.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string representing the output of the <code>dbt run</code> command.</p> Source code in <code>prefect_dbt_flow/dbt/cli.py</code> <pre><code>def dbt_run(project: DbtProject, profile: DbtProfile, model: str) -&gt; str:\n    \"\"\"\n    Function that executes `dbt run` command\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        profile: A class that represents a dbt profile configuration.\n        model: Name of the model to run.\n\n    Returns:\n        A string representing the output of the `dbt run` command.\n    \"\"\"\n    dbt_run_cmd = [DBT_EXE, \"run\"]\n    dbt_run_cmd.extend([\"--project-dir\", str(project.project_dir)])\n    dbt_run_cmd.extend([\"--profiles-dir\", str(project.profiles_dir)])\n    dbt_run_cmd.extend([\"-t\", profile.target])\n    dbt_run_cmd.extend([\"-m\", model])\n\n    return cmd.run(\" \".join(dbt_run_cmd))\n</code></pre>"},{"location":"code/#prefect_dbt_flow.dbt.cli.dbt_seed","title":"<code>dbt_seed(project, profile, seed)</code>","text":"<p>Function that executes <code>dbt seed</code> command</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>str</code> <p>Name of the seed to run.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string representing the output of the <code>dbt seed</code> command</p> Source code in <code>prefect_dbt_flow/dbt/cli.py</code> <pre><code>def dbt_seed(project: DbtProject, profile: DbtProfile, seed: str) -&gt; str:\n    \"\"\"\n    Function that executes `dbt seed` command\n\n    Args:\n        seed: Name of the seed to run.\n\n    Returns:\n        A string representing the output of the `dbt seed` command\n    \"\"\"\n    dbt_seed_cmd = [DBT_EXE, \"seed\"]\n    dbt_seed_cmd.extend([\"--project-dir\", str(project.project_dir)])\n    dbt_seed_cmd.extend([\"--profiles-dir\", str(project.profiles_dir)])\n    dbt_seed_cmd.extend([\"-t\", profile.target])\n    dbt_seed_cmd.extend([\"--select\", seed])\n\n    return cmd.run(\" \".join(dbt_seed_cmd))\n</code></pre>"},{"location":"code/#prefect_dbt_flow.dbt.cli.dbt_test","title":"<code>dbt_test(project, profile, model)</code>","text":"<p>Function that executes <code>dbt test</code> command</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>profile</code> <code>DbtProfile</code> <p>A class that represents a dbt profile configuration.</p> required <code>model</code> <code>str</code> <p>Name of the model to run.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A string representing the output of the <code>dbt test</code> command.</p> Source code in <code>prefect_dbt_flow/dbt/cli.py</code> <pre><code>def dbt_test(project: DbtProject, profile: DbtProfile, model: str) -&gt; str:\n    \"\"\"\n    Function that executes `dbt test` command\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        profile: A class that represents a dbt profile configuration.\n        model: Name of the model to run.\n\n    Returns:\n        A string representing the output of the `dbt test` command.\n    \"\"\"\n    dbt_test_cmd = [DBT_EXE, \"test\"]\n    dbt_test_cmd.extend([\"--project-dir\", str(project.project_dir)])\n    dbt_test_cmd.extend([\"--profiles-dir\", str(project.profiles_dir)])\n    dbt_test_cmd.extend([\"-t\", profile.target])\n    dbt_test_cmd.extend([\"-m\", model])\n\n    return cmd.run(\" \".join(dbt_test_cmd))\n</code></pre>"},{"location":"code/#graph","title":"GRAPH","text":""},{"location":"code/#prefect_dbt_flow.dbt.graph","title":"<code>prefect_dbt_flow.dbt.graph</code>","text":"<p>Code for parsing dbt project and generate a list of dbt nodes</p>"},{"location":"code/#prefect_dbt_flow.dbt.graph.parse_dbt_project","title":"<code>parse_dbt_project(project, dag_options=None)</code>","text":"<p>Parses a list of dbt nodes class objects from dbt ls cli command.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>dag_otpions</code> <p>A class to add dbt DAG configurations.</p> required <p>Returns:</p> Name Type Description <code>dbt_graph</code> <code>List[DbtNode]</code> <p>A list of dbt nodes, each node as a dataclass.</p> Source code in <code>prefect_dbt_flow/dbt/graph.py</code> <pre><code>def parse_dbt_project(\n    project: DbtProject, dag_options: Optional[DbtDagOptions] = None\n) -&gt; List[DbtNode]:\n    \"\"\"\n    Parses a list of dbt nodes class objects from dbt ls cli command.\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        dag_otpions: A class to add dbt DAG configurations.\n\n    Returns:\n        dbt_graph: A list of dbt nodes, each node as a dataclass.\n    \"\"\"\n    dbt_graph: List[DbtNode] = []\n    models_with_tests: List[str] = []\n\n    dbt_ls_output = cli.dbt_ls(project, dag_options)\n\n    for line in dbt_ls_output.split(\"\\n\"):\n        try:\n            node_dict = json.loads(line.strip())\n\n            if node_dict[\"resource_type\"] == \"model\":\n                dbt_graph.append(\n                    DbtNode(\n                        name=node_dict[\"name\"],\n                        unique_id=node_dict[\"unique_id\"],\n                        resource_type=DbtResourceType.MODEL,\n                        depends_on=node_dict[\"depends_on\"].get(\"nodes\", []),\n                    )\n                )\n            if node_dict[\"resource_type\"] == \"test\":\n                models_with_tests.extend(node_dict[\"depends_on\"][\"nodes\"])\n\n            if node_dict[\"resource_type\"] == \"seed\":\n                dbt_graph.append(\n                    DbtNode(\n                        name=node_dict[\"name\"],\n                        unique_id=node_dict[\"unique_id\"],\n                        resource_type=DbtResourceType.SEED,\n                        depends_on=node_dict[\"depends_on\"].get(\"nodes\", []),\n                    )\n                )\n\n        except json.decoder.JSONDecodeError:\n            pass\n\n    # Check if a node has tests\n    for dbt_node in dbt_graph:\n        if dbt_node.unique_id in models_with_tests:\n            dbt_node.has_tests = True\n\n    # Remove dependencies if not in Graph (needed in case of select/exclude)\n    all_model_ids = [dbt_node.unique_id for dbt_node in dbt_graph]\n    for dbt_node in dbt_graph:\n        dbt_node.depends_on = [\n            node_id for node_id in dbt_node.depends_on if node_id in all_model_ids\n        ]\n\n    return dbt_graph\n</code></pre>"},{"location":"code/#tasks","title":"TASKS","text":""},{"location":"code/#prefect_dbt_flow.dbt.tasks","title":"<code>prefect_dbt_flow.dbt.tasks</code>","text":"<p>Code for generate prefect DAG, includes dbt run and test functions</p>"},{"location":"code/#prefect_dbt_flow.dbt.tasks.generate_tasks_dag","title":"<code>generate_tasks_dag(project, profile, dbt_graph, run_test_after_model=False)</code>","text":"<p>Generate a Prefect DAG for running and testing dbt models.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>DbtProject</code> <p>A class that represents a dbt project configuration.</p> required <code>profile</code> <code>DbtProfile</code> <p>A class that represents a dbt profile configuration.</p> required <code>dbt_graph</code> <code>List[DbtNode]</code> <p>A list of dbt nodes (models) to include in the DAG.</p> required <code>run_test_after_model</code> <code>bool</code> <p>If True, run tests after running each model.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>prefect_dbt_flow/dbt/tasks.py</code> <pre><code>def generate_tasks_dag(\n    project: DbtProject,\n    profile: DbtProfile,\n    dbt_graph: List[DbtNode],\n    run_test_after_model: bool = False,\n) -&gt; None:\n    \"\"\"\n    Generate a Prefect DAG for running and testing dbt models.\n\n    Args:\n        project: A class that represents a dbt project configuration.\n        profile: A class that represents a dbt profile configuration.\n        dbt_graph: A list of dbt nodes (models) to include in the DAG.\n        run_test_after_model: If True, run tests after running each model.\n\n    Returns:\n        None\n    \"\"\"\n\n    # TODO: refactor this\n    all_tasks = {\n        dbt_node.unique_id: RESOURCE_TYPE_TO_TASK[dbt_node.resource_type](\n            project=project,\n            profile=profile,\n            dbt_node=dbt_node,\n        )\n        for dbt_node in dbt_graph\n    }\n\n    submitted_tasks: Dict[str, Any] = {}\n    while node := _get_next_node(dbt_graph, list(submitted_tasks.keys())):\n        run_task = all_tasks[node.unique_id]\n        task_dependencies = [\n            submitted_tasks[node_unique_id] for node_unique_id in node.depends_on\n        ]\n\n        run_task_future = run_task.submit(wait_for=task_dependencies)\n\n        if run_test_after_model and node.has_tests:\n            test_task = _task_dbt_test(\n                project=project,\n                profile=profile,\n                dbt_node=node,\n            )\n            test_task_future = test_task.submit(wait_for=run_task_future)\n\n            submitted_tasks[node.unique_id] = test_task_future\n        else:\n            submitted_tasks[node.unique_id] = run_task_future\n</code></pre>"},{"location":"code/#init","title":"INIT","text":""},{"location":"code/#prefect_dbt_flow.dbt","title":"<code>prefect_dbt_flow.dbt</code>","text":"<p>Code for managing and configuring a dbt project.</p>"},{"location":"code/#prefect_dbt_flow.dbt.DbtDagOptions","title":"<code>DbtDagOptions</code>  <code>dataclass</code>","text":"<p>Class to add dbt DAG configurations.</p> <p>Parameters:</p> Name Type Description Default <code>select</code> <code>Optional[str]</code> <p>dbt module to include in the run</p> <code>None</code> <code>exclude</code> <code>Optional[str]</code> <p>dbt module to exclude in the run</p> <code>None</code> <code>run_test_after_model</code> <code>bool</code> <p>run test afeter run model</p> <code>False</code> Source code in <code>prefect_dbt_flow/dbt/__init__.py</code> <pre><code>@dataclass\nclass DbtDagOptions:\n    \"\"\"\n    Class to add dbt DAG configurations.\n\n    Args:\n        select: dbt module to include in the run\n        exclude: dbt module to exclude in the run\n        run_test_after_model: run test afeter run model\n    \"\"\"\n\n    select: Optional[str] = None\n    exclude: Optional[str] = None\n    run_test_after_model: bool = False\n</code></pre>"},{"location":"code/#prefect_dbt_flow.dbt.DbtNode","title":"<code>DbtNode</code>  <code>dataclass</code>","text":"<p>Class that represents a dbt node in the project.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>dbt node name, e. my_model_a</p> required <code>unique_id</code> <code>str</code> <p>dbt id e. model.sample_project.my_model_a</p> required <code>resource_type</code> <code>DbtResourceType</code> <p>dbt resource type, e. model or seed</p> required <code>depends_on</code> <code>List[str]</code> <p>e. [\"model.sample_project.my_model_b\"]</p> required <code>has_tests</code> <code>bool</code> <p>if node is a test</p> <code>False</code> Source code in <code>prefect_dbt_flow/dbt/__init__.py</code> <pre><code>@dataclass\nclass DbtNode:\n    \"\"\"\n    Class that represents a dbt node in the project.\n\n    Args:\n        name: dbt node name, e. my_model_a\n        unique_id: dbt id e. model.sample_project.my_model_a\n        resource_type: dbt resource type, e. model or seed\n        depends_on: e. [\"model.sample_project.my_model_b\"]\n        has_tests: if node is a test\n    \"\"\"\n\n    name: str\n    unique_id: str\n    resource_type: DbtResourceType\n    depends_on: List[str]\n    has_tests: bool = False\n</code></pre>"},{"location":"code/#prefect_dbt_flow.dbt.DbtProfile","title":"<code>DbtProfile</code>  <code>dataclass</code>","text":"<p>Class that represents a dbt profile configuration.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>dbt target, usualy \"dev\" or \"prod\"</p> required Source code in <code>prefect_dbt_flow/dbt/__init__.py</code> <pre><code>@dataclass\nclass DbtProfile:\n    \"\"\"\n    Class that represents a dbt profile configuration.\n\n    Args:\n        target: dbt target, usualy \"dev\" or \"prod\"\n    \"\"\"\n\n    target: str\n</code></pre>"},{"location":"code/#prefect_dbt_flow.dbt.DbtProject","title":"<code>DbtProject</code>  <code>dataclass</code>","text":"<p>Class that represents a dbt project configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of dbt project,</p> required <code>project_dir</code> <code>Union[str, Path]</code> <p>Path to directory that contains dbt project.yml</p> required <code>profiles_dir</code> <code>Union[str, Path]</code> <p>Path to directory that contains dbt profiles.yml</p> required Source code in <code>prefect_dbt_flow/dbt/__init__.py</code> <pre><code>@dataclass\nclass DbtProject:\n    \"\"\"\n    Class that represents a dbt project configuration.\n\n    Args:\n        name: Name of dbt project,\n        project_dir: Path to directory that contains dbt project.yml\n        profiles_dir: Path to directory that contains dbt profiles.yml\n    \"\"\"\n\n    name: str\n    project_dir: Union[str, Path]\n    profiles_dir: Union[str, Path]\n</code></pre>"},{"location":"code/#prefect_dbt_flow.dbt.DbtResourceType","title":"<code>DbtResourceType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enum class that represents a dbt resource type.</p> Source code in <code>prefect_dbt_flow/dbt/__init__.py</code> <pre><code>class DbtResourceType(Enum):\n    \"\"\"\n    Enum class that represents a dbt resource type.\n    \"\"\"\n\n    MODEL = auto()\n    SEED = auto()\n    SNAPSHOT = auto()\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023 dataroots</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"coverage/","title":"Coverage","text":""}]}